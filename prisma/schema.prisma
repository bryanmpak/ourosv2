// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Shared User model
model User {
  id                String    @id @default(uuid())
  userId            String    @unique
  name              String?
  image             String?
  firstName         String?
  isAccountLinked   Boolean   @default(false)
  linkedUserId      String?
  partnerId         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  habits            Habit[]
  linkingRequests   AccountLink[]
  letters           Letter[]
  timer             Timer?

  @@index([userId], name: "by_userId")
  @@index([linkedUserId], name: "linkedUserId_idx")
}

// Unified LinkingRequest / AccountLink model
model AccountLink {
  id              String    @id @default(uuid())
  userId          String
  userEmail       String?
  partnerId       String?
  partnerEmail    String?
  passcode        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [userId])

  @@index([userId], name: "by_user")
  @@unique([userId, partnerEmail], name: "unique_user_partnerEmail")
}

// Habits app models
model Habit {
  id              String    @id @default(uuid())
  habitName       String
  color           String
  slug            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  user            User      @relation(fields: [userId], references: [userId])
  userId          String
  completions     HabitCompletion[]
}

model HabitCompletion {
  id              String    @id @default(uuid())
  date            DateTime
  dayOfWeek       String
  isActive        Boolean
  isComplete      Boolean
  isIncluded      Boolean
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  habit           Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId         String
}

// Main app models
model Letter {
  id              String    @id @default(uuid())
  content         Json      @db.Json
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  user            User      @relation(fields: [userId], references: [userId])
  userId          String
}

model Timer {
  id              String    @id @default(uuid())
  timeElapsed     Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  user            User      @relation(fields: [userId], references: [userId])
  userId          String    @unique
}